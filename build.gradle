buildscript {
    ext {
        projectVersion = '3.1.0-SNAPSHOT'

        springBootVersion = '2.0.0.RELEASE'
        springDependencyManagementVersion = '[1.0,2.0['

        lombokVersion = '[1.16,2.0['
        swaggerAnnotationsVersion = '[1.5,2.0['
        nimbusJwtVersion = '[5.7,6.0['
        commonsCodecVersion = '[1.10,2.0['
        bouncyCastleVersion = '[1.57,2.0['
        spyMemcachedVersion = '[2.12,3.0['
        expiringMapVersion = '[0.5,1.0['
        h2Version = '[1.4,2.0['
        jetbrainsAnnotationsVersion = '[16.0,17.0['
        powerMockVersion = '[1.7,2.0['
        jedisVersion = '[2.9,3.0['
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath "gradle.plugin.gradle-plugins:jartest:1.0.1"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

subprojects {
    group = 'eu.fraho.spring'
    archivesBaseName = "security-jwt-${project.name}"
    version = "${projectVersion}"
    description = "Spring boot security integration for JWT"

    jar {
        version = "${project.version}"
        manifest {
            attributes(
                    "Implementation-Title": "Gradle",
                    "Implementation-Version": version
            )
        }
    }

    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
        }
    }

    dependencies {
        compile("org.jetbrains:annotations:${jetbrainsAnnotationsVersion}")
        compileOnly("org.projectlombok:lombok:${lombokVersion}")

        optional "org.springframework.boot:spring-boot-configuration-processor"

        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile('org.springframework:spring-aspects')
        testCompile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
        testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    }

    // do not abort on test failures
    test {
        ignoreFailures = true
    }

    // propdeps
    compileJava.dependsOn(processResources)

    // transitive dependencies for tests
    apply plugin: 'com.github.hauner.jarTest'

    // release stuff
    apply plugin: 'maven'
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testsJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
        from sourceSets.test.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar, testsJar
    }

    // code coverage
    apply plugin: 'jacoco'
    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    check.dependsOn jacocoTestReport
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

if (project.hasProperty('release')) {
    apply plugin: 'io.codearte.nexus-staging'

    subprojects {
        // abort on test failures on releasing
        test {
            ignoreFailures = false
        }

        apply plugin: 'signing'

        // Signature of artifacts
        signing {
            sign configurations.archives
        }

        // OSSRH publication
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    if (project.version.endsWith('-SNAPSHOT')) {
                        repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }
                    } else {
                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }
                    }
                    pom.project {
                        name project.archivesBaseName
                        description project.description
                        url 'https://github.com/bratkartoffel/security-jwt'

                        scm {
                            connection 'scm:git:https://github.com/bratkartoffel/security-jwt.git'
                            developerConnection 'scm:git:git@github.com:bratkartoffel/security-jwt.git'
                            url 'https://github.com/bratkartoffel/security-jwt.git'
                        }

                        licenses {
                            license {
                                name 'The MIT License (MIT)'
                                url 'http://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'bratkartoffel'
                                name = 'Simon Frankenberger'
                                email = 'simon-ossrh-release@fraho.eu'
                            }
                        }
                    }
                }
            }
        }
    }

    nexusStaging {
        username = ossrhUsername
        password = ossrhPassword
    }
}
