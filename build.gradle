buildscript {
    ext {
        projectVersion = '0.7.1-SNAPSHOT'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"
    }
}

apply plugin: 'io.codearte.nexus-staging'

subprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    group = 'eu.fraho.spring'
    archivesBaseName = "security-jwt-${project.name}"
    version = "${projectVersion}"
    description = "Spring boot security integration for JWT"

    jar {
        version = "${project.version}"
    }
    buildscript {
        ext {
            springBootVersion = '[1.5,2.0['
            springDependencyManagementVersion = '[1.0,2.0['
            lombokVersion = '[1.16,2.0['
            springfoxVersion = '[2.6,3.0['
            nimbusJwtVersion = '[4.37,5.0['
            commonsCodecVersion = '[1.10,2.0['
            bouncyCastleVersion = '[1.57,2.0['
            spyMemcachedVersion = '[2.12,3.0['
            expiringMapVersion = '[0.5,1.0['
            h2Version = '[1.4,2.0['
        }
        repositories {
            mavenCentral()
        }
    }
    dependencies {
        compile("org.projectlombok:lombok:${lombokVersion}")

        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile('org.springframework:spring-aspects')
        testCompile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    }

    // release stuff
    apply plugin: 'maven'
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testsJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
        from sourceSets.test.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar, testsJar
    }

    // code coverage
    apply plugin: 'jacoco'
    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    check.dependsOn jacocoTestReport
}

if (project.hasProperty('release')) {
    subprojects {
        apply plugin: 'signing'

        // Signature of artifacts
        signing {
            sign configurations.archives
        }

        // OSSRH publication
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    if (project.version.endsWith('-SNAPSHOT')) {
                        repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }
                    } else {
                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }
                    }
                    pom.project {
                        name project.archivesBaseName
                        description project.description
                        url 'https://github.com/bratkartoffel/security-jwt'

                        scm {
                            connection 'scm:git:https://github.com/bratkartoffel/security-jwt.git'
                            developerConnection 'scm:git:git@github.com:bratkartoffel/security-jwt.git'
                            url 'https://github.com/bratkartoffel/security-jwt.git'
                        }

                        licenses {
                            license {
                                name 'The MIT License (MIT)'
                                url 'http://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'bratkartoffel'
                                name = 'Simon Frankenberger'
                                email = 'simon-ossrh-release@fraho.eu'
                            }
                        }
                    }
                }
            }
        }
    }

    nexusStaging {
        username = ossrhUsername
        password = ossrhPassword
    }
}
