buildscript {
    ext {
        projectVersion = '4.0.1-SNAPSHOT'
        javaCompabitility = 8

        springBootVersion = '2.1.2.RELEASE'
        springDependencyManagementVersion = '1.0.6.RELEASE'

        lombokVersion = '1.18.6'
        swaggerAnnotations2Version = '1.5.21'
        swaggerAnnotations3Version = '2.0.6'
        nimbusJwtVersion = '7.0'
        commonsCodecVersion = '1.11'
        bouncyCastleVersion = '1.61'
        spyMemcachedVersion = '2.12.3'
        expiringMapVersion = '0.5.9'
        h2Version = '1.4.197'
        powerMockVersion = '2.0.0'
        jedisVersion = '3.0.1'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
        classpath 'io.spring.gradle:propdeps-plugin:0.0.10.RELEASE'
        classpath "gradle.plugin.gradle-plugins:jartest:1.0.1"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}"
    }
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    group = 'eu.fraho.spring'
    archivesBaseName = "security-jwt-${project.name}"
    version = "${projectVersion}"
    description = "Spring boot security integration for JWT"
    sourceCompatibility = javaCompabitility
    targetCompatibility = javaCompabitility

    jar {
        manifest {
            attributes(
                    "Implementation-Title": "Gradle",
                    "Implementation-Version": version,
                    "Build-Jdk": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                    "Compatibility": javaCompabitility,
            )
        }
    }

// START java 9 stuff
    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                exclude 'module-info.java'
            }
        }
        moduleInfo {
            java {
                srcDir 'src/main/java'
                include 'module-info.java'
            }
            compileClasspath = sourceSets.main.compileClasspath
        }
    }

    compileModuleInfoJava {
        sourceCompatibility = 9
        targetCompatibility = 9
        doFirst {
            options.compilerArgs = [
                    '--module-path', compileJava.classpath.asPath,
                    '-d', sourceSets.main.output.classesDirs.asPath
            ]
            classpath = files()
        }
        dependsOn(compileJava)
    }

    jar {
        from sourceSets.moduleInfo.output
        from sourceSets.main.output
    }
// END java 9 stuff

    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
        }
    }

    dependencies {
        compileOnly("org.projectlombok:lombok:${lombokVersion}")

        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile('org.springframework:spring-aspects')
        testCompile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    }

    // spring dependency management
    apply plugin: 'io.spring.dependency-management'
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
    }

    // propdeps
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
    compileJava {
        dependsOn(processResources)
    }

    // transitive dependencies for tests
    apply plugin: 'com.github.hauner.jarTest'

    // release stuff
    task javadocJar(type: Jar) {
        archiveClassifier.set('javadoc')
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task testsJar(type: Jar) {
        archiveClassifier.set('tests')
        from sourceSets.test.output
        from sourceSets.test.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar, testsJar
    }

    // code coverage
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = "0.8.2"
    }
    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
    check {
        dependsOn(jacocoTestReport)
    }

    // release to central
    apply plugin: 'signing'
    apply plugin: 'maven'
    if (project.hasProperty('release')) {
        // abort on test failures on releasing
        test {
            ignoreFailures = false
        }

        // Signature of artifacts
        signing {
            useGpgCmd()
            sign configurations.archives
        }

        // OSSRH publication
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    if (project.version.endsWith('-SNAPSHOT')) {
                        repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }
                    } else {
                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }
                    }
                    pom.project {
                        name = project.archivesBaseName
                        description project.description
                        url 'https://github.com/bratkartoffel/security-jwt'

                        scm {
                            connection 'scm:git:https://github.com/bratkartoffel/security-jwt.git'
                            developerConnection 'scm:git:git@github.com:bratkartoffel/security-jwt.git'
                            url 'https://github.com/bratkartoffel/security-jwt.git'
                        }

                        licenses {
                            license {
                                name 'The MIT License (MIT)'
                                url 'http://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'bratkartoffel'
                                name = 'Simon Frankenberger'
                                email = 'simon-ossrh-release@fraho.eu'
                            }
                        }
                    }
                }
            }
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.from(subprojects.sourceSets.main.allSource.srcDirs,
            subprojects.sourceSets.main.allSource.srcDirs,
            subprojects.sourceSets.main.output,
            subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
}
