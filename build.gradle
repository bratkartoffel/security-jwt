plugins {
    id 'io.spring.dependency-management' version "$springDependencyManagementPluginVersion" apply false
    id "io.freefair.lombok" version "$lombokPluginVersion" apply false
    id 'com.adarshr.test-logger' version "$testLoggerPluginVersion" apply false
    id 'com.github.ben-manes.versions' version "$versionsPluginVersion"
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.adarshr.test-logger'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    group = 'eu.fraho.spring'
    archivesBaseName = "security-jwt-${project.name}"
    version = rootProject.file('version.txt').text.trim()
    description = "Spring boot security integration for JWT"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    java {
        withJavadocJar()
        withSourcesJar()
    }

    jar {
        manifest {
            attributes(
                    'Implementation-Title': rootProject.name,
                    'Implementation-Version': project.version,
                    'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                    'Compatibility': project.sourceCompatibility,
                    'Built-By': System.getProperty('user.name')
            )
        }
    }

    test {
        ignoreFailures = rootProject.version.endsWith('-SNAPSHOT')
    }

    dependencies {
        annotationProcessor group: "org.springframework.boot", name: "spring-boot-configuration-processor", version: springBootVersion

        testFixturesApi group: "org.springframework.boot", name: "spring-boot-starter-test", version: springBootVersion
        testImplementation group: "org.springframework.boot", name: "spring-boot-starter-test", version: springBootVersion
        testImplementation group: "com.fasterxml.jackson.datatype", name: "jackson-datatype-jsr310", version: jacksonVersion
    }

    // code coverage
    apply plugin: 'jacoco'
    jacoco.toolVersion = jacocoVersion
    jacocoTestReport.reports {
        xml.enabled = true
        html.enabled = true
    }
    check.dependsOn(jacocoTestReport)

    // release to central
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version
                from components.java

                pom {
                    name = project.archivesBaseName
                    description = project.description
                    url = 'https://github.com/bratkartoffel/security-jwt'

                    scm {
                        connection = 'scm:git:https://github.com/bratkartoffel/security-jwt.git'
                        developerConnection = 'scm:git:git@github.com:bratkartoffel/security-jwt.git'
                        url = 'https://github.com/bratkartoffel/security-jwt.git'
                    }

                    licenses {
                        license {
                            name = 'The MIT License (MIT)'
                            url = 'http://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'bratkartoffel'
                            name = 'Simon Frankenberger'
                            email = 'simon-ossrh-release@fraho.eu'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    credentials {
                        username = project.property('ossrhUsername')
                        password = project.property('ossrhPassword')
                    }
                }
                url = project.version.endsWith('-SNAPSHOT') ?
                        'https://oss.sonatype.org/content/repositories/snapshots' :
                        'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            }
        }
    }

    // Signature of artifacts
    signing {
        required = !rootProject.version.endsWith('-SNAPSHOT')
        useGpgCmd()
        sign publishing.publications.mavenJava
    }

    // enhancement for jenkins build
    // do not try to print colors in stdout
    if (System.getenv("JENKINS_HOME") != null) {
        testlogger.theme 'plain'
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.from(
            subprojects.sourceSets.main.allSource.srcDirs,
            subprojects.sourceSets.main.output,
            subprojects.jacocoTestReport.executionData
    )
    reports {
        html.enabled = true
        xml.enabled = true
    }
    onlyIf = {
        true
    }
}

// dependencyUpdates should only suggest released versions
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
